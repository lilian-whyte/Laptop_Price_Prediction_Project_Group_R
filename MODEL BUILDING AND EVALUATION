# Based on correlation analysis, box plots, and domain knowledge, select the features for the model.
# Include numerical features with good correlation and the encoded categorical features that show price variations.
# Exclude original categorical columns and 'laptop_ID'.

selected_features = [
    'Inches',
    'Ram',
    'Weight',
    'Company_Encoded',
    'TypeName_Encoded',
    'Screen_Type_Encoded',
    'CPU_Brand_Encoded',
    'Processing_Level_Encoded',
    'CPU_Details_Encoded',
    'Memory_Value',
    'Memory_Type_Encoded',
    'GPU_Company_Encoded',
    'GPU_Type_Encoded',
    'OpSys_Encoded'
]

X = df[selected_features]
y = df['Price_euros']

print("Selected features (X):")
display(X.head())
print("\nTarget variable (y):")
display(y.head())

from sklearn.model_selection import train_test_split

# Split the data into training and testing sets
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.25, random_state=42)

# Print the shapes of the resulting sets
print("Shape of X_train:", X_train.shape)
print("Shape of X_test:", X_test.shape)
print("Shape of y_train:", y_train.shape)
print("Shape of y_test:", y_test.shape)

from sklearn.ensemble import RandomForestRegressor

# Initialize the Random Forest Regressor model
model = RandomForestRegressor(random_state=8)

# Train the Random Forest Regressor model
model.fit(X_train, y_train)

from sklearn.metrics import mean_absolute_error, mean_squared_error, r2_score

# Make predictions on the test set
y_pred = model.predict(X_test)

# Evaluate the model
mae = mean_absolute_error(y_test, y_pred)
mse = mean_squared_error(y_test, y_pred)
rmse = np.sqrt(mse)
r2 = r2_score(y_test, y_pred)

print(f"Mean Absolute Error (MAE): {mae:.2f}")
print(f"Mean Squared Error (MSE): {mse:.2f}")
print(f"Root Mean Squared Error (RMSE): {rmse:.2f}")
print(f"R-squared (R2): {r2:.2f}")

# Import the necessary evaluation metrics
from sklearn.metrics import mean_absolute_error, mean_squared_error, r2_score
import numpy as np

# Use the trained model to make predictions on the testing features
y_pred = model.predict(X_test)

# Calculate the evaluation metrics
mae = mean_absolute_error(y_test, y_pred)
mse = mean_squared_error(y_test, y_pred)
rmse = np.sqrt(mse)
r2 = r2_score(y_test, y_pred)

# Print the calculated metrics
print(f"Mean Absolute Error (MAE): {mae:.2f}")
print(f"Mean Squared Error (MSE): {mse:.2f}")
print(f"Root Mean Squared Error (RMSE): {rmse:.2f}")
print(f"R-squared (R2): {r2:.2f}")

# Display the actual and predicted prices
results_df = pd.DataFrame({'Actual Price': y_test, 'Predicted Price': y_pred})
display(results_df.head(20))

